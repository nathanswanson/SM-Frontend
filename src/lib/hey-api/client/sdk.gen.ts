// This file is auto-generated by @hey-api/openapi-ts

import { type Client, type Options as Options2, type TDataShape, urlSearchParamsBodySerializer } from './client';
import { client } from './client.gen';
import type { AddTemplateApiTemplateCreatePostData, AddTemplateApiTemplateCreatePostErrors, AddTemplateApiTemplateCreatePostResponses, CreateContainerApiContainerCreateTemplateNamePostData, CreateContainerApiContainerCreateTemplateNamePostErrors, CreateContainerApiContainerCreateTemplateNamePostResponses, CreateUserAccountCreatePostData, CreateUserAccountCreatePostErrors, CreateUserAccountCreatePostResponses, DeleteContainerApiContainerContainerNameDeleteGetData, DeleteContainerApiContainerContainerNameDeleteGetErrors, DeleteContainerApiContainerContainerNameDeleteGetResponses, DeleteFileApiContainerContainerNameFsDeletePostData, DeleteFileApiContainerContainerNameFsDeletePostErrors, DeleteFileApiContainerContainerNameFsDeletePostResponses, DeleteTemplateApiTemplateNameDeletePostData, DeleteTemplateApiTemplateNameDeletePostErrors, DeleteTemplateApiTemplateNameDeletePostResponses, DiskUsageApiNodesDiskUsageGetData, DiskUsageApiNodesDiskUsageGetErrors, DiskUsageApiNodesDiskUsageGetResponses, GetContainerStatusApiContainerContainerNameStatusGetData, GetContainerStatusApiContainerContainerNameStatusGetErrors, GetContainerStatusApiContainerContainerNameStatusGetResponses, GetDirectoryFilenamesApiContainerContainerNameFsListGetData, GetDirectoryFilenamesApiContainerContainerNameFsListGetErrors, GetDirectoryFilenamesApiContainerContainerNameFsListGetResponses, GetLogMessageApiContainerContainerNameLogsGetData, GetLogMessageApiContainerContainerNameLogsGetErrors, GetLogMessageApiContainerContainerNameLogsGetResponses, GetTemplateNameApiTemplateNameGetData, GetTemplateNameApiTemplateNameGetErrors, GetTemplateNameApiTemplateNameGetResponses, GetUserMePostData, GetUserMePostErrors, GetUserMePostResponses, HardwareApiNodesHardwareGetData, HardwareApiNodesHardwareGetErrors, HardwareApiNodesHardwareGetResponses, ListContainersApiContainerListGetData, ListContainersApiContainerListGetErrors, ListContainersApiContainerListGetResponses, ListTemplatesApiTemplateListGetData, ListTemplatesApiTemplateListGetErrors, ListTemplatesApiTemplateListGetResponses, LoginUserTokenPostData, LoginUserTokenPostErrors, LoginUserTokenPostResponses, PingApiNodesPingGetData, PingApiNodesPingGetErrors, PingApiNodesPingGetResponses, ReadFileApiContainerContainerNameFsGetData, ReadFileApiContainerContainerNameFsGetErrors, ReadFileApiContainerContainerNameFsGetResponses, RuntimeApiNodesRuntimeGetData, RuntimeApiNodesRuntimeGetErrors, RuntimeApiNodesRuntimeGetResponses, SendCommandApiContainerContainerNameCommandGetData, SendCommandApiContainerContainerNameCommandGetErrors, SendCommandApiContainerContainerNameCommandGetResponses, StartContainerApiContainerNameStartGetData, StartContainerApiContainerNameStartGetErrors, StartContainerApiContainerNameStartGetResponses, StopContainerApiContainerNameStopGetData, StopContainerApiContainerNameStopGetErrors, StopContainerApiContainerNameStopGetResponses, UploadFileApiContainerContainerNameFsUploadPostData, UploadFileApiContainerContainerNameFsUploadPostErrors, UploadFileApiContainerContainerNameFsUploadPostResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List Containers
 * list all container names
 */
export const listContainersApiContainerListGet = <ThrowOnError extends boolean = false>(options?: Options<ListContainersApiContainerListGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListContainersApiContainerListGetResponses, ListContainersApiContainerListGetErrors, ThrowOnError>({
        url: '/api/container/list',
        ...options
    });
};

/**
 * Start Container
 * start a container by name
 */
export const startContainerApiContainerNameStartGet = <ThrowOnError extends boolean = false>(options: Options<StartContainerApiContainerNameStartGetData, ThrowOnError>) => {
    return (options.client ?? client).get<StartContainerApiContainerNameStartGetResponses, StartContainerApiContainerNameStartGetErrors, ThrowOnError>({
        url: '/api/container/{name}/start',
        ...options
    });
};

/**
 * Stop Container
 * stop a container by name
 */
export const stopContainerApiContainerNameStopGet = <ThrowOnError extends boolean = false>(options: Options<StopContainerApiContainerNameStopGetData, ThrowOnError>) => {
    return (options.client ?? client).get<StopContainerApiContainerNameStopGetResponses, StopContainerApiContainerNameStopGetErrors, ThrowOnError>({
        url: '/api/container/{name}/stop',
        ...options
    });
};

/**
 * Create Container
 * create a new container from a template
 */
export const createContainerApiContainerCreateTemplateNamePost = <ThrowOnError extends boolean = false>(options: Options<CreateContainerApiContainerCreateTemplateNamePostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateContainerApiContainerCreateTemplateNamePostResponses, CreateContainerApiContainerCreateTemplateNamePostErrors, ThrowOnError>({
        url: '/api/container/create/{template_name}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Container Status
 * get container running status
 */
export const getContainerStatusApiContainerContainerNameStatusGet = <ThrowOnError extends boolean = false>(options: Options<GetContainerStatusApiContainerContainerNameStatusGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetContainerStatusApiContainerContainerNameStatusGetResponses, GetContainerStatusApiContainerContainerNameStatusGetErrors, ThrowOnError>({
        url: '/api/container/{container_name}/status',
        ...options
    });
};

/**
 * Get Log Message
 * get the last line_count lines of container logs, defaults to 25 if not specified
 */
export const getLogMessageApiContainerContainerNameLogsGet = <ThrowOnError extends boolean = false>(options: Options<GetLogMessageApiContainerContainerNameLogsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetLogMessageApiContainerContainerNameLogsGetResponses, GetLogMessageApiContainerContainerNameLogsGetErrors, ThrowOnError>({
        url: '/api/container/{container_name}/logs',
        ...options
    });
};

/**
 * Get Directory Filenames
 * list files in a container volume path
 */
export const getDirectoryFilenamesApiContainerContainerNameFsListGet = <ThrowOnError extends boolean = false>(options: Options<GetDirectoryFilenamesApiContainerContainerNameFsListGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDirectoryFilenamesApiContainerContainerNameFsListGetResponses, GetDirectoryFilenamesApiContainerContainerNameFsListGetErrors, ThrowOnError>({
        url: '/api/container/{container_name}/fs/list',
        ...options
    });
};

/**
 * Read File
 * read a file in a container volume, returns a tar archive of the file
 */
export const readFileApiContainerContainerNameFsGet = <ThrowOnError extends boolean = false>(options: Options<ReadFileApiContainerContainerNameFsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadFileApiContainerContainerNameFsGetResponses, ReadFileApiContainerContainerNameFsGetErrors, ThrowOnError>({
        url: '/api/container/{container_name}/fs',
        ...options
    });
};

/**
 * Upload File
 * upload a zip file to a container volume path, extracts zip and places contents in path
 */
export const uploadFileApiContainerContainerNameFsUploadPost = <ThrowOnError extends boolean = false>(options: Options<UploadFileApiContainerContainerNameFsUploadPostData, ThrowOnError>) => {
    return (options.client ?? client).post<UploadFileApiContainerContainerNameFsUploadPostResponses, UploadFileApiContainerContainerNameFsUploadPostErrors, ThrowOnError>({
        url: '/api/container/{container_name}/fs/upload/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete File
 * delete a file in a container volume
 */
export const deleteFileApiContainerContainerNameFsDeletePost = <ThrowOnError extends boolean = false>(options: Options<DeleteFileApiContainerContainerNameFsDeletePostData, ThrowOnError>) => {
    return (options.client ?? client).post<DeleteFileApiContainerContainerNameFsDeletePostResponses, DeleteFileApiContainerContainerNameFsDeletePostErrors, ThrowOnError>({
        url: '/api/container/{container_name}/fs/delete/',
        ...options
    });
};

/**
 * Send Command
 * send a command to a container
 */
export const sendCommandApiContainerContainerNameCommandGet = <ThrowOnError extends boolean = false>(options: Options<SendCommandApiContainerContainerNameCommandGetData, ThrowOnError>) => {
    return (options.client ?? client).get<SendCommandApiContainerContainerNameCommandGetResponses, SendCommandApiContainerContainerNameCommandGetErrors, ThrowOnError>({
        url: '/api/container/{container_name}/command',
        ...options
    });
};

/**
 * Delete Container
 * delete a container by name
 */
export const deleteContainerApiContainerContainerNameDeleteGet = <ThrowOnError extends boolean = false>(options: Options<DeleteContainerApiContainerContainerNameDeleteGetData, ThrowOnError>) => {
    return (options.client ?? client).get<DeleteContainerApiContainerContainerNameDeleteGetResponses, DeleteContainerApiContainerContainerNameDeleteGetErrors, ThrowOnError>({
        url: '/api/container/{container_name}/delete',
        ...options
    });
};

/**
 * List Templates
 * list all template names
 */
export const listTemplatesApiTemplateListGet = <ThrowOnError extends boolean = false>(options?: Options<ListTemplatesApiTemplateListGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListTemplatesApiTemplateListGetResponses, ListTemplatesApiTemplateListGetErrors, ThrowOnError>({
        url: '/api/template/list',
        ...options
    });
};

/**
 * Get Template Name
 * get a template by name
 */
export const getTemplateNameApiTemplateNameGet = <ThrowOnError extends boolean = false>(options: Options<GetTemplateNameApiTemplateNameGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTemplateNameApiTemplateNameGetResponses, GetTemplateNameApiTemplateNameGetErrors, ThrowOnError>({
        url: '/api/template/{name}',
        ...options
    });
};

/**
 * Add Template
 * add a new template
 */
export const addTemplateApiTemplateCreatePost = <ThrowOnError extends boolean = false>(options: Options<AddTemplateApiTemplateCreatePostData, ThrowOnError>) => {
    return (options.client ?? client).post<AddTemplateApiTemplateCreatePostResponses, AddTemplateApiTemplateCreatePostErrors, ThrowOnError>({
        url: '/api/template/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Template
 * delete a template by name
 */
export const deleteTemplateApiTemplateNameDeletePost = <ThrowOnError extends boolean = false>(options: Options<DeleteTemplateApiTemplateNameDeletePostData, ThrowOnError>) => {
    return (options.client ?? client).post<DeleteTemplateApiTemplateNameDeletePostResponses, DeleteTemplateApiTemplateNameDeletePostErrors, ThrowOnError>({
        url: '/api/template/{name}/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Hardware
 * return hardware information in form of a Nodes object
 * fields: id, name, architecture, cpu_cores, memory, disk, cpu_name
 */
export const hardwareApiNodesHardwareGet = <ThrowOnError extends boolean = false>(options?: Options<HardwareApiNodesHardwareGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<HardwareApiNodesHardwareGetResponses, HardwareApiNodesHardwareGetErrors, ThrowOnError>({
        url: '/api/nodes/hardware',
        ...options
    });
};

/**
 * Disk Usage
 * return disk usage in bytes (used, total)
 */
export const diskUsageApiNodesDiskUsageGet = <ThrowOnError extends boolean = false>(options?: Options<DiskUsageApiNodesDiskUsageGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<DiskUsageApiNodesDiskUsageGetResponses, DiskUsageApiNodesDiskUsageGetErrors, ThrowOnError>({
        url: '/api/nodes/disk_usage',
        ...options
    });
};

/**
 * Runtime
 * return runtime in hours
 */
export const runtimeApiNodesRuntimeGet = <ThrowOnError extends boolean = false>(options?: Options<RuntimeApiNodesRuntimeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RuntimeApiNodesRuntimeGetResponses, RuntimeApiNodesRuntimeGetErrors, ThrowOnError>({
        url: '/api/nodes/runtime',
        ...options
    });
};

/**
 * Ping
 * ping the server
 */
export const pingApiNodesPingGet = <ThrowOnError extends boolean = false>(options?: Options<PingApiNodesPingGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<PingApiNodesPingGetResponses, PingApiNodesPingGetErrors, ThrowOnError>({
        url: '/api/nodes/ping',
        ...options
    });
};

/**
 * Login User
 * login user, return access token in cookie
 */
export const loginUserTokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginUserTokenPostData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginUserTokenPostResponses, LoginUserTokenPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Create User Account
 * create a new user account
 */
export const createUserAccountCreatePost = <ThrowOnError extends boolean = false>(options: Options<CreateUserAccountCreatePostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateUserAccountCreatePostResponses, CreateUserAccountCreatePostErrors, ThrowOnError>({
        url: '/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get User
 * get current user information
 */
export const getUserMePost = <ThrowOnError extends boolean = false>(options?: Options<GetUserMePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetUserMePostResponses, GetUserMePostErrors, ThrowOnError>({
        url: '/me',
        ...options
    });
};
